Inteface & Abstract Class

1. Payment Processing System
Problem:
Create an abstract class Payment that has an abstract method makePayment(double amount). Implement two classes CreditCardPayment and UPIPayment that extend Payment. Each of these classes should print the amount being processed and the payment type.

2. Employee Management System with Multiple Roles
Problem:
Create an interface Employee with a method calculateSalary().Now, implement two classes Manager and Developer that implement the Employee interface. Each role should have different salary structures. Additionally, each class should print a description of their role along with the salary.

3. Online Store Order Processing
Problem:
Design an abstract class Order with an abstract method processOrder().Create two subclasses: OnlineOrder and InStoreOrder, where each subclass prints different steps to process the respective orders. For example, an online order might involve shipping, while an in-store order might involve pick-up.

4. Media Player with Multiple Formats
Problem:
Create an interface MediaPlayer with methods play() and stop(). Implement two classes MP3Player and VideoPlayer that play and stop media in their respective formats (audio and video). Each class should print whether it's playing or stopping an audio or video file.

5. Shopping Cart System
Problem:
Create an abstract class Item with methods getPrice() and getName(). Create subclasses Electronics and Clothes that implement the abstract methods and provide a price and name for each item. Finally, create a shopping cart where you can add different items and calculate the total price.



















import java.util.ArrayList;
import java.util.List;

// Abstract class Item.java
abstract class Item {
    // Abstract methods
    public abstract double getPrice();
    public abstract String getName();
}

// Electronics.java - Class extending Item
class Electronics extends Item {
    private String name;
    private double price;

    // Constructor to initialize electronics item
    public Electronics(String name, double price) {
        this.name = name;
        this.price = price;
    }

    // Implementing abstract methods
    @Override
    public double getPrice() {
        return price;
    }

    @Override
    public String getName() {
        return name;
    }
}

// Clothes.java - Class extending Item
class Clothes extends Item {
    private String name;
    private double price;

    // Constructor to initialize clothes item
    public Clothes(String name, double price) {
        this.name = name;
        this.price = price;
    }

    // Implementing abstract methods
    @Override
    public double getPrice() {
        return price;
    }

    @Override
    public String getName() {
        return name;
    }
}

// ShoppingCart.java - Class to handle cart operations
class ShoppingCart {
    // List to hold items
    private List<Item> items;

    // Constructor to initialize shopping cart
    public ShoppingCart() {
        items = new ArrayList<>();
    }

    // Method to add item to the cart
    public void addItem(Item item) {
        items.add(item);
        System.out.println(item.getName() + " added to the cart.");
    }

    // Method to calculate total price of items in the cart
    public double calculateTotal() {
        double total = 0;
        for (Item item : items) {
            total += item.getPrice();
        }
        return total;
    }

    // Method to display items in the cart
    public void displayCartItems() {
        System.out.println("Items in your cart:");
        for (Item item : items) {
            System.out.println("- " + item.getName() + ": $" + item.getPrice());
        }
    }
}

// Main class to test the shopping cart system
public class ShoppingSystem {
    public static void main(String[] args) {
        // Creating a shopping cart
        ShoppingCart cart = new ShoppingCart();

        // Creating items
        Item laptop = new Electronics("Laptop", 1200.00);
        Item phone = new Electronics("Smartphone", 800.00);
        Item tshirt = new Clothes("T-Shirt", 25.50);
        Item jeans = new Clothes("Jeans", 50.00);

        // Adding items to the cart
        cart.addItem(laptop);
        cart.addItem(phone);
        cart.addItem(tshirt);
        cart.addItem(jeans);

        // Displaying items in the cart
        cart.displayCartItems();

        // Calculating and displaying the total price
        double total = cart.calculateTotal();
        System.out.println("Total Price: $" + total);
    }
}
